from fastapi import FastAPI, File, UploadFile, HTTPException, Depends
from sqlalchemy.orm import Session
from . import models, schemas, database, utils
from fastapi.middleware.cors import CORSMiddleware
from typing import List

app = FastAPI()

# CORS Middleware for cross-origin requests
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

models.Base.metadata.create_all(bind=database.engine)

@app.post("/upload/")
async def upload_document(file: UploadFile = File(...), db: Session = Depends(database.get_db)):
    content = await file.read()
    document_text = content.decode("utf-8")  # Assuming the document is a text file
    embedding = utils.get_embedding(document_text)

    document = models.Document(name=file.filename, content=content, embedding=embedding)
    db.add(document)
    db.commit()
    db.refresh(document)
    return {"filename": file.filename, "id": document.id}

@app.get("/documents/{document_id}", response_model=schemas.Document)
def read_document(document_id: int, db: Session = Depends(database.get_db)):
    document = db.query(models.Document).filter(models.Document.id == document_id).first()
    if document is None:
        raise HTTPException(status_code=404, detail="Document not found")
    return document

@app.post("/chat/")
async def chat_with_documents(queries: List[str], db: Session = Depends(database.get_db)):
    documents = db.query(models.Document).all()
    document_texts = [doc.content.decode("utf-8") for doc in documents]
    responses = [utils.get_response(query, document_texts) for query in queries]
    return {"responses": responses}
